import {Deck} from './deck.js';
import { Player } from './player.js';
import {renderDeck,rendernoplayers,render_win_message,render_lose_message,render_3_cards,render_players_buttons,renderwinner,render_no_selectedcards,render_3_cards_button} from "./render.js";

const players = [];
const noplayersdiv=document.querySelector('#noplayersdiv');
const noplayersselection = document.getElementById('nofplayersselection');    
const show_set_button = document.getElementById('show_set');
const is_set_exist_button = document.getElementById('is_set_exist');
const deal_3_cards_button = document.getElementById('deal_3_cards');
const start_game = document.getElementById('start_game');
const game_mode_selection = document.querySelectorAll("input[name='g-mode']")
const difficulty_selection = document.querySelectorAll("input[name='g-dif']")
const timeUP = document.getElementById('counter');
let deck = new Deck();

export function handleCardClick(evt){

    if(evt.target.id === 'selected'){
        evt.target.id = 'unselected';
        
    }
    else if(evt.target.id === 'unselected'){
        evt.target.id = 'selected';
    }  
}

export function handleplayerbuttonclick(e1){

    e1.target.disabled = true;
    var index = e1.target.id;
    players[index].play(index);
 
}

function toggleDeck(l3iba="hide"){
    if(l3iba=="hide"){
        document.getElementById("deck").classList.remove('d-none');
    }
    else{
        document.getElementById("deck").classList.add('d-none');
    }
}
function handleDifficulty() {
    deck.generate_deck("Starter")
    difficulty_selection.forEach((el) => {
      el.addEventListener("click", () => {
        if (el.value === "Advanced") {
          deck.generate_deck("Advanced")
          toggleDeck("show");
        } else {
            deck.generate_deck("Starter");
            
        }
      })
    })
    deck.shuffle()
    renderDeck(deck.deal(12))
  }
      

export function handlenumberofplayers(){

    noplayersdiv.innerHTML='';

    for(let i=0;i<noplayersselection.value;i++){

        rendernoplayers(noplayersdiv,i);
    }
}

function displayplayers(){

    for(let i=0;i<players.length;i++){
        console.log(players[i]);
    }
}

export function isEndgame(){

}
export function displaywinner(){

    var maxscore = players[0].score;
    var winner = players[0].name;
    for(let i=0;i<players.length;i++){
        if(players[i].score>maxscore){
            maxscore = players[i].score; 
            winner = players[i].name;
        }
    }
    var message = 'The Winner is : '+winner+ ' With Score of : '+maxscore;
    console.log(message);
    renderwinner(message);
}

export function storeinplayerslist(){
// there is an error here must generated by foreach
// the error is when we select one player the querySelector not function 
    const playersinput = document.querySelectorAll("#Player");
   
    if (playersinput.length==0){
        rendernoplayers(1,1);
        players.push(new Player(new Player(playersinput[i].value)));
    }
    else{
        for(let i=0;i<noplayersselection.value;i++){

            players.push(new Player(playersinput[i].value));
        
        }
    }
        noplayersselection.removeEventListener('change',handlenumberofplayers);

    }

    function handleGameMode() {
        game_mode_selection.forEach((el) => {
          el.addEventListener("click", () => {
            if (el.value === "Competitive") {
              show_set_button.disabled = true
              is_set_exist_button.disabled = true
              deal_3_cards_button.disabled = true
            } else {
              show_set_button.disabled = false
              is_set_exist_button.disabled = false
              deal_3_cards_button.disabled = false
            }
          })
        })
      }
      


export function remove_set_from_table(){

    const selectedcards = document.querySelectorAll('#selected');

    for(let i = 0 ;i<selectedcards.length;i++){

        selectedcards[i].parentNode.removeChild(selectedcards[i]);
    }
    render_3_cards(deck);
}

function enableallcards(){
    const table_cards = document.querySelectorAll('#unselected');

        for(let i=0;i<table_cards.length;i++){
            table_cards[i].addEventListener('click',handleCardClick);
    }
}

export function evaluate(id){

    var table_cards = document.querySelectorAll('#unselected');
    const selectedcards = document.querySelectorAll('#selected');


    if(selectedcards.length===3){
        for(let i=0;i<table_cards.length;i++){
            table_cards[i].removeEventListener('click',handleCardClick);
    }
    
    if(is_Set(selectedcards)){
        render_win_message();
        remove_set_from_table(); 
        players[id].score++;   
        console.log( players[id].name +' has score : '+ players[id].score);  
    }
    else{
        render_lose_message();
        for(let i=0;i<selectedcards.length;i++){
            selectedcards[i].id = 'unselected';
    }
        console.log( players[id].name +' has score : '+ players[id].score);   
    }

    enableallcards();
}else{
    render_no_selectedcards();
}
 table_cards = document.querySelectorAll('#unselected');

for(let i=0;i<table_cards.length;i++){
    table_cards[i].removeEventListener('click',handleCardClick);
}

}


export function is_Set(selectedcards){

if(selectedcards[0].className === selectedcards[1].className && selectedcards[1].className === selectedcards[2].className){
    return true;
}
else if (selectedcards[0].className != selectedcards[1].className && selectedcards[1].className != selectedcards[2].className && selectedcards[0].className != selectedcards[2].className){
    return true;
}
else{
    return false;
}
}

function handleStartGame(){
    toggleDeck();
    start_game.disabled = true;
    storeinplayerslist();
    render_players_buttons(players);
    handleDifficulty();
    handleGameMode();

}
function handleDeal3cardsclick(){
    render_3_cards_button(deck);
}

//start_game.addEventListener('click',toggleDeck());
handleGameMode()
handleDifficulty()
noplayersselection.addEventListener('change',handlenumberofplayers);

start_game.addEventListener('click',handleStartGame);
deal_3_cards_button.addEventListener('click',handleDeal3cardsclick);
//mossiba ka7la za7la
